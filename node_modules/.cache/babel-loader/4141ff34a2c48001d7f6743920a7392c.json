{"ast":null,"code":"import { concat, hexlify } from \"@ethersproject/bytes\";\nimport { nameprep, toUtf8Bytes } from \"@ethersproject/strings\";\nimport { keccak256 } from \"@ethersproject/keccak256\";\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nvar logger = new Logger(version);\nvar Zeros = new Uint8Array(32);\nZeros.fill(0);\nvar Partition = new RegExp(\"^((.*)\\\\.)?([^.]+)$\");\nexport function isValidName(name) {\n  try {\n    var comps = name.split(\".\");\n    for (var i = 0; i < comps.length; i++) {\n      if (nameprep(comps[i]).length === 0) {\n        throw new Error(\"empty\");\n      }\n    }\n    return true;\n  } catch (error) {}\n  return false;\n}\nexport function namehash(name) {\n  /* istanbul ignore if */\n  if (typeof name !== \"string\") {\n    logger.throwArgumentError(\"invalid ENS name; not a string\", \"name\", name);\n  }\n  var current = name;\n  var result = Zeros;\n  while (current.length) {\n    var partition = current.match(Partition);\n    if (partition == null || partition[2] === \"\") {\n      logger.throwArgumentError(\"invalid ENS address; missing component\", \"name\", name);\n    }\n    var label = toUtf8Bytes(nameprep(partition[3]));\n    result = keccak256(concat([result, keccak256(label)]));\n    current = partition[2] || \"\";\n  }\n  return hexlify(result);\n}\nexport function dnsEncode(name) {\n  return hexlify(concat(name.split(\".\").map(function (comp) {\n    // We jam in an _ prefix to fill in with the length later\n    // Note: Nameprep throws if the component is over 63 bytes\n    var bytes = toUtf8Bytes(\"_\" + nameprep(comp));\n    bytes[0] = bytes.length - 1;\n    return bytes;\n  }))) + \"00\";\n}","map":null,"metadata":{},"sourceType":"module"}