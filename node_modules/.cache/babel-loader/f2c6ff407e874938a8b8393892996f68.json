{"ast":null,"code":"import { __awaiter, __generator } from \"tslib\";\nexport function makeJsonRpcPayloadFactory() {\n  var nextId = 0;\n  return function (method, params) {\n    return {\n      method: method,\n      params: params,\n      jsonrpc: \"2.0\",\n      id: \"alc-web3:\" + nextId++\n    };\n  };\n}\nexport function makeJsonRpcSenders(sendJsonRpcPayload, makeJsonRpcPayload) {\n  var _this = this;\n  var send = function send(method, params) {\n    return __awaiter(_this, void 0, void 0, function () {\n      var response;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4 /*yield*/, sendJsonRpcPayload(makeJsonRpcPayload(method, params))];\n          case 1:\n            response = _a.sent();\n            if (response.error) {\n              throw new Error(response.error.message);\n            }\n            return [2 /*return*/, response.result];\n        }\n      });\n    });\n  };\n  function sendBatch(parts) {\n    return __awaiter(this, void 0, void 0, function () {\n      var payload, response, message, errorResponse;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            payload = parts.map(function (_a) {\n              var method = _a.method,\n                params = _a.params;\n              return makeJsonRpcPayload(method, params);\n            });\n            return [4 /*yield*/, sendJsonRpcPayload(payload)];\n          case 1:\n            response = _a.sent();\n            if (!Array.isArray(response)) {\n              message = response.error ? response.error.message : \"Batch request failed\";\n              throw new Error(message);\n            }\n            errorResponse = response.find(function (r) {\n              return !!r.error;\n            });\n            if (errorResponse) {\n              throw new Error(errorResponse.error.message);\n            }\n            // The ids are ascending numbers because that's what Payload Factories do.\n            return [2 /*return*/, response.sort(function (r1, r2) {\n              return r1.id - r2.id;\n            }).map(function (r) {\n              return r.result;\n            })];\n        }\n      });\n    });\n  }\n  return {\n    send: send,\n    sendBatch: sendBatch\n  };\n}\nexport function makeResponse(id, result) {\n  return {\n    jsonrpc: \"2.0\",\n    id: id,\n    result: result\n  };\n}","map":null,"metadata":{},"sourceType":"module"}