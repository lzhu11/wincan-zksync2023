{"ast":null,"code":"var _jsxFileName = \"/Users/zhu/Desktop/nft-collectible-frontend/src/App.js\",\n  _s = $RefreshSig$();\nimport { useEffect, useState } from 'react';\nimport './App.css';\nimport contract from './contracts/NFTCollectible.json';\nimport { ethers } from 'ethers';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst contractAddress = \"0x5F7959A124C44fa8E352ed614d245305781E6153\";\nconst abi = contract.abi;\nfunction App() {\n  _s();\n  const [currentAccount, setCurrentAccount] = useState(null);\n  const checkWalletIsConnected = async () => {\n    const {\n      ethereum\n    } = window;\n    if (!ethereum) {\n      console.log(\"make sure you have metamask installed!\");\n      return;\n    } else {\n      console.log(\"wallet exists! we are ready to go!\");\n    }\n    const accounts = await ethereum.request({\n      method: 'eth_accounts'\n    });\n    if (accounts.length !== 0) {\n      const account = accounts[0];\n      console.log(\"found an authorized account: \", account);\n      setCurrentAccount(account);\n    } else {\n      console.log(\"no authorized account found\");\n    }\n  };\n  const connectWalletHandler = async () => {\n    const {\n      ethereum\n    } = window;\n    if (!ethereum) {\n      alert(\"please install metamask!\");\n    }\n    try {\n      const accounts = await ethereum.request({\n        method: 'eth_requestAccounts'\n      });\n      console.log(\"found an account! address: \", accounts[0]);\n      setCurrentAccount(accounts[0]);\n    } catch (err) {\n      console.log(err);\n    }\n  };\n  const mintNftHandler = async () => {\n    try {\n      const {\n        ethereum\n      } = window;\n      if (ethereum) {\n        const provider = new ethers.providers.Web3Provider(ethereum);\n        const signer = provider.getSigner();\n        const nftContract = new ethers.Contract(contractAddress, abi, signer);\n        console.log(\"Mining...please wait!\");\n        await nftTxn.wait();\n        console.log('Mined, see transaction : https://goerli.etherscan.io/tx/${nftTxn.hash}');\n      } else {\n        console.log(\"ethereum object does not exist\");\n      }\n    } catch (err) {\n      console.log(err);\n    }\n  };\n  const connectWalletButton = () => {\n    return /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: connectWalletHandler,\n      className: \"cta-button connect-wallet-button\",\n      children: \"Connect Wallet\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 7\n    }, this);\n  };\n  const mintNftButton = () => {\n    return /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: mintNftHandler,\n      className: \"cta-button mint-nft-button\",\n      children: \"Mint NFT\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 7\n    }, this);\n  };\n  useEffect(() => {\n    checkWalletIsConnected();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"main-app\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Scrappy Squirrels Tutorial\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: currentAccount ? mintNftButton() : connectWalletButton()\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 93,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"vg9h9hqTAVJVjklrPXRRIAqzLN0=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["useEffect","useState","contract","ethers","jsxDEV","_jsxDEV","contractAddress","abi","App","_s","currentAccount","setCurrentAccount","checkWalletIsConnected","ethereum","window","console","log","accounts","request","method","length","account","connectWalletHandler","alert","err","mintNftHandler","provider","providers","Web3Provider","signer","getSigner","nftContract","Contract","nftTxn","wait","connectWalletButton","onClick","className","children","fileName","_jsxFileName","lineNumber","columnNumber","mintNftButton","_c","$RefreshReg$"],"sources":["/Users/zhu/Desktop/nft-collectible-frontend/src/App.js"],"sourcesContent":["import { useEffect,useState } from 'react';\nimport './App.css';\nimport contract from './contracts/NFTCollectible.json';\nimport { ethers } from 'ethers';\n\nconst contractAddress = \"0x5F7959A124C44fa8E352ed614d245305781E6153\";\nconst abi = contract.abi;\n\nfunction App() {\n\n  const [currentAccount, setCurrentAccount] = useState(null);\n\n  const checkWalletIsConnected = async() => { \n    const { ethereum } = window;\n\n    if (!ethereum){\n      console.log(\"make sure you have metamask installed!\");\n      return;\n    }else{\n      console.log(\"wallet exists! we are ready to go!\");\n    }\n\n    const accounts = await ethereum.request({method:'eth_accounts'});\n\n    if (accounts.length !== 0){\n      const account = accounts[0];\n      console.log(\"found an authorized account: \",account);\n      setCurrentAccount(account);\n    }else{\n      console.log(\"no authorized account found\");\n    }\n  }\n\n  const connectWalletHandler = async() => {\n    const { ethereum } = window;\n    \n    if(!ethereum){\n      alert(\"please install metamask!\");\n    }\n\n    try{\n      const accounts = await ethereum.request({method: 'eth_requestAccounts'});\n      console.log(\"found an account! address: \",accounts[0]);\n      setCurrentAccount(accounts[0]);\n    }catch(err){\n      console.log(err)\n    }\n   }\n\n  const mintNftHandler = async() => {\n    try{\n      const {ethereum} = window;\n\n      if(ethereum){\n        const provider = new ethers.providers.Web3Provider(ethereum);\n        const signer = provider.getSigner();\n        const nftContract = new ethers.Contract(contractAddress, abi ,signer);\n\n        console.log(\"Mining...please wait!\");\n        await nftTxn.wait();\n\n        console.log('Mined, see transaction : https://goerli.etherscan.io/tx/${nftTxn.hash}');\n      \n      }else{\n        console.log(\"ethereum object does not exist\");\n      }\n    }catch(err){\n      console.log(err);\n    }\n  }\n\n  const connectWalletButton = () => {\n    return (\n      <button onClick={connectWalletHandler} className='cta-button connect-wallet-button'>\n        Connect Wallet\n      </button>\n    )\n  }\n\n  const mintNftButton = () => {\n    return (\n      <button onClick={mintNftHandler} className='cta-button mint-nft-button'>\n        Mint NFT\n      </button>\n    )\n  }\n\n  useEffect(() => {\n    checkWalletIsConnected();\n  }, [])\n\n  return (\n    <div className='main-app'>\n      <h1>Scrappy Squirrels Tutorial</h1>\n      <div>\n        {currentAccount ? mintNftButton() : connectWalletButton()}\n      </div>\n    </div>\n  )\n}\n\nexport default App;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}