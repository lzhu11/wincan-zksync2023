{"ast":null,"code":"//import { TypedDataDomain, TypedDataField } from \"@ethersproject/providerabstract-signer\";\nimport { getAddress } from \"../address/index.js\";\nimport { keccak256 } from \"../crypto/index.js\";\nimport { recoverAddress } from \"../transaction/index.js\";\nimport { concat, defineProperties, getBigInt, getBytes, hexlify, isHexString, mask, toBeHex, toTwos, zeroPadValue, assertArgument } from \"../utils/index.js\";\nimport { id } from \"./id.js\";\nconst padding = new Uint8Array(32);\npadding.fill(0);\nconst BN__1 = BigInt(-1);\nconst BN_0 = BigInt(0);\nconst BN_1 = BigInt(1);\nconst BN_MAX_UINT256 = BigInt(\"0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\");\n;\n;\nfunction hexPadRight(value) {\n  const bytes = getBytes(value);\n  const padOffset = bytes.length % 32;\n  if (padOffset) {\n    return concat([bytes, padding.slice(padOffset)]);\n  }\n  return hexlify(bytes);\n}\nconst hexTrue = toBeHex(BN_1, 32);\nconst hexFalse = toBeHex(BN_0, 32);\nconst domainFieldTypes = {\n  name: \"string\",\n  version: \"string\",\n  chainId: \"uint256\",\n  verifyingContract: \"address\",\n  salt: \"bytes32\"\n};\nconst domainFieldNames = [\"name\", \"version\", \"chainId\", \"verifyingContract\", \"salt\"];\nfunction checkString(key) {\n  return function (value) {\n    assertArgument(typeof value === \"string\", `invalid domain value for ${JSON.stringify(key)}`, `domain.${key}`, value);\n    return value;\n  };\n}\nconst domainChecks = {\n  name: checkString(\"name\"),\n  version: checkString(\"version\"),\n  chainId: function (value) {\n    return getBigInt(value, \"domain.chainId\");\n  },\n  verifyingContract: function (value) {\n    try {\n      return getAddress(value).toLowerCase();\n    } catch (error) {}\n    assertArgument(false, `invalid domain value \"verifyingContract\"`, \"domain.verifyingContract\", value);\n  },\n  salt: function (value) {\n    const bytes = getBytes(value, \"domain.salt\");\n    assertArgument(bytes.length === 32, `invalid domain value \"salt\"`, \"domain.salt\", value);\n    return hexlify(bytes);\n  }\n};\nfunction getBaseEncoder(type) {\n  // intXX and uintXX\n  {\n    const match = type.match(/^(u?)int(\\d*)$/);\n    if (match) {\n      const signed = match[1] === \"\";\n      const width = parseInt(match[2] || \"256\");\n      assertArgument(width % 8 === 0 && width !== 0 && width <= 256 && (match[2] == null || match[2] === String(width)), \"invalid numeric width\", \"type\", type);\n      const boundsUpper = mask(BN_MAX_UINT256, signed ? width - 1 : width);\n      const boundsLower = signed ? (boundsUpper + BN_1) * BN__1 : BN_0;\n      return function (_value) {\n        const value = getBigInt(_value, \"value\");\n        assertArgument(value >= boundsLower && value <= boundsUpper, `value out-of-bounds for ${type}`, \"value\", value);\n        return toBeHex(toTwos(value, 256), 32);\n      };\n    }\n  }\n  // bytesXX\n  {\n    const match = type.match(/^bytes(\\d+)$/);\n    if (match) {\n      const width = parseInt(match[1]);\n      assertArgument(width !== 0 && width <= 32 && match[1] === String(width), \"invalid bytes width\", \"type\", type);\n      return function (value) {\n        const bytes = getBytes(value);\n        assertArgument(bytes.length === width, `invalid length for ${type}`, \"value\", value);\n        return hexPadRight(value);\n      };\n    }\n  }\n  switch (type) {\n    case \"address\":\n      return function (value) {\n        return zeroPadValue(getAddress(value), 32);\n      };\n    case \"bool\":\n      return function (value) {\n        return !value ? hexFalse : hexTrue;\n      };\n    case \"bytes\":\n      return function (value) {\n        return keccak256(value);\n      };\n    case \"string\":\n      return function (value) {\n        return id(value);\n      };\n  }\n  return null;\n}\nfunction encodeType(name, fields) {\n  return `${name}(${fields.map(_ref => {\n    let {\n      name,\n      type\n    } = _ref;\n    return type + \" \" + name;\n  }).join(\",\")})`;\n}\nexport class TypedDataEncoder {\n  primaryType;\n  #types;\n  get types() {\n    return JSON.parse(this.#types);\n  }\n  #fullTypes;\n  #encoderCache;\n  constructor(types) {\n    this.#types = JSON.stringify(types);\n    this.#fullTypes = new Map();\n    this.#encoderCache = new Map();\n    // Link struct types to their direct child structs\n    const links = new Map();\n    // Link structs to structs which contain them as a child\n    const parents = new Map();\n    // Link all subtypes within a given struct\n    const subtypes = new Map();\n    Object.keys(types).forEach(type => {\n      links.set(type, new Set());\n      parents.set(type, []);\n      subtypes.set(type, new Set());\n    });\n    for (const name in types) {\n      const uniqueNames = new Set();\n      for (const field of types[name]) {\n        // Check each field has a unique name\n        assertArgument(!uniqueNames.has(field.name), `duplicate variable name ${JSON.stringify(field.name)} in ${JSON.stringify(name)}`, \"types\", types);\n        uniqueNames.add(field.name);\n        // Get the base type (drop any array specifiers)\n        const baseType = field.type.match(/^([^\\x5b]*)(\\x5b|$)/)[1] || null;\n        assertArgument(baseType !== name, `circular type reference to ${JSON.stringify(baseType)}`, \"types\", types);\n        // Is this a base encoding type?\n        const encoder = getBaseEncoder(baseType);\n        if (encoder) {\n          continue;\n        }\n        assertArgument(parents.has(baseType), `unknown type ${JSON.stringify(baseType)}`, \"types\", types);\n        // Add linkage\n        parents.get(baseType).push(name);\n        links.get(name).add(baseType);\n      }\n    }\n    // Deduce the primary type\n    const primaryTypes = Array.from(parents.keys()).filter(n => parents.get(n).length === 0);\n    assertArgument(primaryTypes.length !== 0, \"missing primary type\", \"types\", types);\n    assertArgument(primaryTypes.length === 1, `ambiguous primary types or unused types: ${primaryTypes.map(t => JSON.stringify(t)).join(\", \")}`, \"types\", types);\n    defineProperties(this, {\n      primaryType: primaryTypes[0]\n    });\n    // Check for circular type references\n    function checkCircular(type, found) {\n      assertArgument(!found.has(type), `circular type reference to ${JSON.stringify(type)}`, \"types\", types);\n      found.add(type);\n      for (const child of links.get(type)) {\n        if (!parents.has(child)) {\n          continue;\n        }\n        // Recursively check children\n        checkCircular(child, found);\n        // Mark all ancestors as having this decendant\n        for (const subtype of found) {\n          subtypes.get(subtype).add(child);\n        }\n      }\n      found.delete(type);\n    }\n    checkCircular(this.primaryType, new Set());\n    // Compute each fully describe type\n    for (const [name, set] of subtypes) {\n      const st = Array.from(set);\n      st.sort();\n      this.#fullTypes.set(name, encodeType(name, types[name]) + st.map(t => encodeType(t, types[t])).join(\"\"));\n    }\n  }\n  getEncoder(type) {\n    let encoder = this.#encoderCache.get(type);\n    if (!encoder) {\n      encoder = this.#getEncoder(type);\n      this.#encoderCache.set(type, encoder);\n    }\n    return encoder;\n  }\n  #getEncoder(type) {\n    // Basic encoder type (address, bool, uint256, etc)\n    {\n      const encoder = getBaseEncoder(type);\n      if (encoder) {\n        return encoder;\n      }\n    }\n    // Array\n    const match = type.match(/^(.*)(\\x5b(\\d*)\\x5d)$/);\n    if (match) {\n      const subtype = match[1];\n      const subEncoder = this.getEncoder(subtype);\n      return value => {\n        assertArgument(!match[3] || parseInt(match[3]) === value.length, `array length mismatch; expected length ${parseInt(match[3])}`, \"value\", value);\n        let result = value.map(subEncoder);\n        if (this.#fullTypes.has(subtype)) {\n          result = result.map(keccak256);\n        }\n        return keccak256(concat(result));\n      };\n    }\n    // Struct\n    const fields = this.types[type];\n    if (fields) {\n      const encodedType = id(this.#fullTypes.get(type));\n      return value => {\n        const values = fields.map(_ref2 => {\n          let {\n            name,\n            type\n          } = _ref2;\n          const result = this.getEncoder(type)(value[name]);\n          if (this.#fullTypes.has(type)) {\n            return keccak256(result);\n          }\n          return result;\n        });\n        values.unshift(encodedType);\n        return concat(values);\n      };\n    }\n    assertArgument(false, `unknown type: ${type}`, \"type\", type);\n  }\n  encodeType(name) {\n    const result = this.#fullTypes.get(name);\n    assertArgument(result, `unknown type: ${JSON.stringify(name)}`, \"name\", name);\n    return result;\n  }\n  encodeData(type, value) {\n    return this.getEncoder(type)(value);\n  }\n  hashStruct(name, value) {\n    return keccak256(this.encodeData(name, value));\n  }\n  encode(value) {\n    return this.encodeData(this.primaryType, value);\n  }\n  hash(value) {\n    return this.hashStruct(this.primaryType, value);\n  }\n  _visit(type, value, callback) {\n    // Basic encoder type (address, bool, uint256, etc)\n    {\n      const encoder = getBaseEncoder(type);\n      if (encoder) {\n        return callback(type, value);\n      }\n    }\n    // Array\n    const match = type.match(/^(.*)(\\x5b(\\d*)\\x5d)$/);\n    if (match) {\n      assertArgument(!match[3] || parseInt(match[3]) === value.length, `array length mismatch; expected length ${parseInt(match[3])}`, \"value\", value);\n      return value.map(v => this._visit(match[1], v, callback));\n    }\n    // Struct\n    const fields = this.types[type];\n    if (fields) {\n      return fields.reduce((accum, _ref3) => {\n        let {\n          name,\n          type\n        } = _ref3;\n        accum[name] = this._visit(type, value[name], callback);\n        return accum;\n      }, {});\n    }\n    assertArgument(false, `unknown type: ${type}`, \"type\", type);\n  }\n  visit(value, callback) {\n    return this._visit(this.primaryType, value, callback);\n  }\n  static from(types) {\n    return new TypedDataEncoder(types);\n  }\n  static getPrimaryType(types) {\n    return TypedDataEncoder.from(types).primaryType;\n  }\n  static hashStruct(name, types, value) {\n    return TypedDataEncoder.from(types).hashStruct(name, value);\n  }\n  static hashDomain(domain) {\n    const domainFields = [];\n    for (const name in domain) {\n      if (domain[name] == null) {\n        continue;\n      }\n      const type = domainFieldTypes[name];\n      assertArgument(type, `invalid typed-data domain key: ${JSON.stringify(name)}`, \"domain\", domain);\n      domainFields.push({\n        name,\n        type\n      });\n    }\n    domainFields.sort((a, b) => {\n      return domainFieldNames.indexOf(a.name) - domainFieldNames.indexOf(b.name);\n    });\n    return TypedDataEncoder.hashStruct(\"EIP712Domain\", {\n      EIP712Domain: domainFields\n    }, domain);\n  }\n  static encode(domain, types, value) {\n    return concat([\"0x1901\", TypedDataEncoder.hashDomain(domain), TypedDataEncoder.from(types).hash(value)]);\n  }\n  static hash(domain, types, value) {\n    return keccak256(TypedDataEncoder.encode(domain, types, value));\n  }\n  // Replaces all address types with ENS names with their looked up address\n  static async resolveNames(domain, types, value, resolveName) {\n    // Make a copy to isolate it from the object passed in\n    domain = Object.assign({}, domain);\n    // Allow passing null to ignore value\n    for (const key in domain) {\n      if (domain[key] == null) {\n        delete domain[key];\n      }\n    }\n    // Look up all ENS names\n    const ensCache = {};\n    // Do we need to look up the domain's verifyingContract?\n    if (domain.verifyingContract && !isHexString(domain.verifyingContract, 20)) {\n      ensCache[domain.verifyingContract] = \"0x\";\n    }\n    // We are going to use the encoder to visit all the base values\n    const encoder = TypedDataEncoder.from(types);\n    // Get a list of all the addresses\n    encoder.visit(value, (type, value) => {\n      if (type === \"address\" && !isHexString(value, 20)) {\n        ensCache[value] = \"0x\";\n      }\n      return value;\n    });\n    // Lookup each name\n    for (const name in ensCache) {\n      ensCache[name] = await resolveName(name);\n    }\n    // Replace the domain verifyingContract if needed\n    if (domain.verifyingContract && ensCache[domain.verifyingContract]) {\n      domain.verifyingContract = ensCache[domain.verifyingContract];\n    }\n    // Replace all ENS names with their address\n    value = encoder.visit(value, (type, value) => {\n      if (type === \"address\" && ensCache[value]) {\n        return ensCache[value];\n      }\n      return value;\n    });\n    return {\n      domain,\n      value\n    };\n  }\n  static getPayload(domain, types, value) {\n    // Validate the domain fields\n    TypedDataEncoder.hashDomain(domain);\n    // Derive the EIP712Domain Struct reference type\n    const domainValues = {};\n    const domainTypes = [];\n    domainFieldNames.forEach(name => {\n      const value = domain[name];\n      if (value == null) {\n        return;\n      }\n      domainValues[name] = domainChecks[name](value);\n      domainTypes.push({\n        name,\n        type: domainFieldTypes[name]\n      });\n    });\n    const encoder = TypedDataEncoder.from(types);\n    const typesWithDomain = Object.assign({}, types);\n    assertArgument(typesWithDomain.EIP712Domain == null, \"types must not contain EIP712Domain type\", \"types.EIP712Domain\", types);\n    typesWithDomain.EIP712Domain = domainTypes;\n    // Validate the data structures and types\n    encoder.encode(value);\n    return {\n      types: typesWithDomain,\n      domain: domainValues,\n      primaryType: encoder.primaryType,\n      message: encoder.visit(value, (type, value) => {\n        // bytes\n        if (type.match(/^bytes(\\d*)/)) {\n          return hexlify(getBytes(value));\n        }\n        // uint or int\n        if (type.match(/^u?int/)) {\n          return getBigInt(value).toString();\n        }\n        switch (type) {\n          case \"address\":\n            return value.toLowerCase();\n          case \"bool\":\n            return !!value;\n          case \"string\":\n            assertArgument(typeof value === \"string\", \"invalid string\", \"value\", value);\n            return value;\n        }\n        assertArgument(false, \"unsupported type\", \"type\", type);\n      })\n    };\n  }\n}\n/**\n *  Compute the address used to sign the typed data for the %%signature%%.\n */\nexport function verifyTypedData(domain, types, value, signature) {\n  return recoverAddress(TypedDataEncoder.hash(domain, types, value), signature);\n}","map":{"version":3,"names":["getAddress","keccak256","recoverAddress","concat","defineProperties","getBigInt","getBytes","hexlify","isHexString","mask","toBeHex","toTwos","zeroPadValue","assertArgument","id","padding","Uint8Array","fill","BN__1","BigInt","BN_0","BN_1","BN_MAX_UINT256","hexPadRight","value","bytes","padOffset","length","slice","hexTrue","hexFalse","domainFieldTypes","name","version","chainId","verifyingContract","salt","domainFieldNames","checkString","key","JSON","stringify","domainChecks","toLowerCase","error","getBaseEncoder","type","match","signed","width","parseInt","String","boundsUpper","boundsLower","_value","encodeType","fields","map","_ref","join","TypedDataEncoder","primaryType","types","parse","fullTypes","encoderCache","constructor","Map","links","parents","subtypes","Object","keys","forEach","set","Set","uniqueNames","field","has","add","baseType","encoder","get","push","primaryTypes","Array","from","filter","n","t","checkCircular","found","child","subtype","delete","st","sort","getEncoder","#getEncoder","subEncoder","result","encodedType","values","_ref2","unshift","encodeData","hashStruct","encode","hash","_visit","callback","v","reduce","accum","_ref3","visit","getPrimaryType","hashDomain","domain","domainFields","a","b","indexOf","EIP712Domain","resolveNames","resolveName","assign","ensCache","getPayload","domainValues","domainTypes","typesWithDomain","message","toString","verifyTypedData","signature"],"sources":["/Users/zhu/Desktop/nft-collectible-frontend/node_modules/ethers/src.ts/hash/typed-data.ts"],"sourcesContent":["//import { TypedDataDomain, TypedDataField } from \"@ethersproject/providerabstract-signer\";\nimport { getAddress } from \"../address/index.js\";\nimport { keccak256 } from \"../crypto/index.js\";\nimport { recoverAddress } from \"../transaction/index.js\";\nimport {\n    concat, defineProperties, getBigInt, getBytes, hexlify, isHexString, mask, toBeHex, toTwos, zeroPadValue,\n    assertArgument\n} from \"../utils/index.js\";\n\nimport { id } from \"./id.js\";\n\nimport type { SignatureLike } from \"../crypto/index.js\";\nimport type { BigNumberish, BytesLike } from \"../utils/index.js\";\n\n\nconst padding = new Uint8Array(32);\npadding.fill(0);\n\nconst BN__1 = BigInt(-1);\nconst BN_0 = BigInt(0);\nconst BN_1 = BigInt(1);\nconst BN_MAX_UINT256 = BigInt(\"0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\");\n\nexport interface TypedDataDomain {\n    name?: null | string;\n    version?: null | string;\n    chainId?: null | BigNumberish;\n    verifyingContract?: null | string;\n    salt?: null | BytesLike;\n};\n\nexport interface TypedDataField {\n    name: string;\n    type: string;\n};\n\nfunction hexPadRight(value: BytesLike): string {\n    const bytes = getBytes(value);\n    const padOffset = bytes.length % 32\n    if (padOffset) {\n        return concat([ bytes, padding.slice(padOffset) ]);\n    }\n    return hexlify(bytes);\n}\n\nconst hexTrue = toBeHex(BN_1, 32);\nconst hexFalse = toBeHex(BN_0, 32);\n\nconst domainFieldTypes: Record<string, string> = {\n    name: \"string\",\n    version: \"string\",\n    chainId: \"uint256\",\n    verifyingContract: \"address\",\n    salt: \"bytes32\"\n};\n\nconst domainFieldNames: Array<string> = [\n    \"name\", \"version\", \"chainId\", \"verifyingContract\", \"salt\"\n];\n\nfunction checkString(key: string): (value: any) => string {\n    return function (value: any){\n        assertArgument(typeof(value) === \"string\", `invalid domain value for ${ JSON.stringify(key) }`, `domain.${ key }`, value);\n        return value;\n    }\n}\n\nconst domainChecks: Record<string, (value: any) => any> = {\n    name: checkString(\"name\"),\n    version: checkString(\"version\"),\n    chainId: function(value: any) {\n        return getBigInt(value, \"domain.chainId\");\n    },\n    verifyingContract: function(value: any) {\n        try {\n            return getAddress(value).toLowerCase();\n        } catch (error) { }\n        assertArgument(false, `invalid domain value \"verifyingContract\"`, \"domain.verifyingContract\", value);\n    },\n    salt: function(value: any) {\n        const bytes = getBytes(value, \"domain.salt\");\n        assertArgument(bytes.length === 32, `invalid domain value \"salt\"`, \"domain.salt\", value);\n        return hexlify(bytes);\n    }\n}\n\nfunction getBaseEncoder(type: string): null | ((value: any) => string) {\n    // intXX and uintXX\n    {\n        const match = type.match(/^(u?)int(\\d*)$/);\n        if (match) {\n            const signed = (match[1] === \"\");\n\n            const width = parseInt(match[2] || \"256\");\n            assertArgument(width % 8 === 0 && width !== 0 && width <= 256 && (match[2] == null || match[2] === String(width)), \"invalid numeric width\", \"type\", type);\n\n            const boundsUpper = mask(BN_MAX_UINT256, signed ? (width - 1): width);\n            const boundsLower = signed ? ((boundsUpper + BN_1) * BN__1): BN_0;\n\n            return function(_value: BigNumberish) {\n                const value = getBigInt(_value, \"value\");\n\n                assertArgument(value >= boundsLower && value <= boundsUpper, `value out-of-bounds for ${ type }`, \"value\", value);\n\n                return toBeHex(toTwos(value, 256), 32);\n            };\n        }\n    }\n\n    // bytesXX\n    {\n        const match = type.match(/^bytes(\\d+)$/);\n        if (match) {\n            const width = parseInt(match[1]);\n            assertArgument(width !== 0 && width <= 32 && match[1] === String(width), \"invalid bytes width\", \"type\", type);\n\n            return function(value: BytesLike) {\n                const bytes = getBytes(value);\n                assertArgument(bytes.length === width, `invalid length for ${ type }`, \"value\", value);\n                return hexPadRight(value);\n            };\n        }\n    }\n\n    switch (type) {\n        case \"address\": return function(value: string) {\n            return zeroPadValue(getAddress(value), 32);\n        };\n        case \"bool\": return function(value: boolean) {\n            return ((!value) ? hexFalse: hexTrue);\n        };\n        case \"bytes\": return function(value: BytesLike) {\n            return keccak256(value);\n        };\n        case \"string\": return function(value: string) {\n            return id(value);\n        };\n    }\n\n    return null;\n}\n\nfunction encodeType(name: string, fields: Array<TypedDataField>): string {\n    return `${ name }(${ fields.map(({ name, type }) => (type + \" \" + name)).join(\",\") })`;\n}\n\nexport class TypedDataEncoder {\n    readonly primaryType!: string;\n\n    readonly #types: string;\n    get types(): Record<string, Array<TypedDataField>> {\n        return JSON.parse(this.#types);\n    }\n\n    readonly #fullTypes: Map<string, string>\n\n    readonly #encoderCache: Map<string, (value: any) => string>;\n\n    constructor(types: Record<string, Array<TypedDataField>>) {\n        this.#types = JSON.stringify(types);\n        this.#fullTypes = new Map();\n        this.#encoderCache = new Map();\n\n        // Link struct types to their direct child structs\n        const links: Map<string, Set<string>> = new Map();\n\n        // Link structs to structs which contain them as a child\n        const parents: Map<string, Array<string>> = new Map();\n\n        // Link all subtypes within a given struct\n        const subtypes: Map<string, Set<string>> = new Map();\n\n        Object.keys(types).forEach((type) => {\n            links.set(type, new Set());\n            parents.set(type, [ ]);\n            subtypes.set(type, new Set());\n        });\n\n        for (const name in types) {\n            const uniqueNames: Set<string> = new Set();\n\n            for (const field of types[name]) {\n\n                // Check each field has a unique name\n                assertArgument(!uniqueNames.has(field.name), `duplicate variable name ${ JSON.stringify(field.name) } in ${ JSON.stringify(name) }`, \"types\", types);\n                uniqueNames.add(field.name);\n\n                // Get the base type (drop any array specifiers)\n                const baseType = (<any>(field.type.match(/^([^\\x5b]*)(\\x5b|$)/)))[1] || null;\n                assertArgument(baseType !== name, `circular type reference to ${ JSON.stringify(baseType) }`, \"types\", types);\n\n                // Is this a base encoding type?\n                const encoder = getBaseEncoder(baseType);\n                if (encoder) { continue; }\n\n                assertArgument(parents.has(baseType), `unknown type ${ JSON.stringify(baseType) }`, \"types\", types);\n\n                // Add linkage\n                (parents.get(baseType) as Array<string>).push(name);\n                (links.get(name) as Set<string>).add(baseType);\n            }\n        }\n\n        // Deduce the primary type\n        const primaryTypes = Array.from(parents.keys()).filter((n) => ((parents.get(n) as Array<string>).length === 0));\n        assertArgument(primaryTypes.length !== 0, \"missing primary type\", \"types\", types);\n        assertArgument(primaryTypes.length === 1, `ambiguous primary types or unused types: ${ primaryTypes.map((t) => (JSON.stringify(t))).join(\", \") }`, \"types\", types);\n\n        defineProperties<TypedDataEncoder>(this, { primaryType: primaryTypes[0] });\n\n        // Check for circular type references\n        function checkCircular(type: string, found: Set<string>) {\n            assertArgument(!found.has(type), `circular type reference to ${ JSON.stringify(type) }`, \"types\", types);\n\n            found.add(type);\n\n            for (const child of (links.get(type) as Set<string>)) {\n                if (!parents.has(child)) { continue; }\n\n                // Recursively check children\n                checkCircular(child, found);\n\n                // Mark all ancestors as having this decendant\n                for (const subtype of found) {\n                    (subtypes.get(subtype) as Set<string>).add(child);\n                }\n            }\n\n            found.delete(type);\n        }\n        checkCircular(this.primaryType, new Set());\n\n        // Compute each fully describe type\n        for (const [ name, set ] of subtypes) {\n            const st = Array.from(set);\n            st.sort();\n            this.#fullTypes.set(name, encodeType(name, types[name]) + st.map((t) => encodeType(t, types[t])).join(\"\"));\n        }\n    }\n\n    getEncoder(type: string): (value: any) => string {\n        let encoder = this.#encoderCache.get(type);\n        if (!encoder) {\n            encoder = this.#getEncoder(type);\n            this.#encoderCache.set(type, encoder);\n        }\n        return encoder;\n    }\n\n    #getEncoder(type: string): (value: any) => string {\n\n        // Basic encoder type (address, bool, uint256, etc)\n        {\n            const encoder = getBaseEncoder(type);\n            if (encoder) { return encoder; }\n        }\n\n        // Array\n        const match = type.match(/^(.*)(\\x5b(\\d*)\\x5d)$/);\n        if (match) {\n            const subtype = match[1];\n            const subEncoder = this.getEncoder(subtype);\n            return (value: Array<any>) => {\n                assertArgument(!match[3] || parseInt(match[3]) === value.length, `array length mismatch; expected length ${ parseInt(match[3]) }`, \"value\", value);\n\n                let result = value.map(subEncoder);\n                if (this.#fullTypes.has(subtype)) {\n                    result = result.map(keccak256);\n                }\n\n                return keccak256(concat(result));\n            };\n        }\n\n        // Struct\n        const fields = this.types[type];\n        if (fields) {\n            const encodedType = id(this.#fullTypes.get(type) as string);\n            return (value: Record<string, any>) => {\n                const values = fields.map(({ name, type }) => {\n                    const result = this.getEncoder(type)(value[name]);\n                    if (this.#fullTypes.has(type)) { return keccak256(result); }\n                    return result;\n                });\n                values.unshift(encodedType);\n                return concat(values);\n            }\n        }\n\n        assertArgument(false, `unknown type: ${ type }`, \"type\", type);\n    }\n\n    encodeType(name: string): string {\n        const result = this.#fullTypes.get(name);\n        assertArgument(result, `unknown type: ${ JSON.stringify(name) }`, \"name\", name);\n        return result;\n    }\n\n    encodeData(type: string, value: any): string {\n        return this.getEncoder(type)(value);\n    }\n\n    hashStruct(name: string, value: Record<string, any>): string {\n        return keccak256(this.encodeData(name, value));\n    }\n\n    encode(value: Record<string, any>): string {\n        return this.encodeData(this.primaryType, value);\n    }\n\n    hash(value: Record<string, any>): string {\n        return this.hashStruct(this.primaryType, value);\n    }\n\n    _visit(type: string, value: any, callback: (type: string, data: any) => any): any {\n        // Basic encoder type (address, bool, uint256, etc)\n        {\n            const encoder = getBaseEncoder(type);\n            if (encoder) { return callback(type, value); }\n        }\n\n        // Array\n        const match = type.match(/^(.*)(\\x5b(\\d*)\\x5d)$/);\n        if (match) {\n            assertArgument(!match[3] || parseInt(match[3]) === value.length, `array length mismatch; expected length ${ parseInt(match[3]) }`, \"value\", value);\n            return value.map((v: any) => this._visit(match[1], v, callback));\n        }\n\n        // Struct\n        const fields = this.types[type];\n        if (fields) {\n            return fields.reduce((accum, { name, type }) => {\n                accum[name] = this._visit(type, value[name], callback);\n                return accum;\n            }, <Record<string, any>>{});\n        }\n\n        assertArgument(false, `unknown type: ${ type }`, \"type\", type);\n    }\n\n    visit(value: Record<string, any>, callback: (type: string, data: any) => any): any {\n        return this._visit(this.primaryType, value, callback);\n    }\n\n    static from(types: Record<string, Array<TypedDataField>>): TypedDataEncoder {\n        return new TypedDataEncoder(types);\n    }\n\n    static getPrimaryType(types: Record<string, Array<TypedDataField>>): string {\n        return TypedDataEncoder.from(types).primaryType;\n    }\n\n    static hashStruct(name: string, types: Record<string, Array<TypedDataField>>, value: Record<string, any>): string {\n        return TypedDataEncoder.from(types).hashStruct(name, value);\n    }\n\n    static hashDomain(domain: TypedDataDomain): string {\n        const domainFields: Array<TypedDataField> = [ ];\n        for (const name in domain) {\n            if ((<Record<string, any>>domain)[name] == null) { continue; }\n            const type = domainFieldTypes[name];\n            assertArgument(type, `invalid typed-data domain key: ${ JSON.stringify(name) }`, \"domain\", domain);\n            domainFields.push({ name, type });\n        }\n\n        domainFields.sort((a, b) => {\n            return domainFieldNames.indexOf(a.name) - domainFieldNames.indexOf(b.name);\n        });\n\n        return TypedDataEncoder.hashStruct(\"EIP712Domain\", { EIP712Domain: domainFields }, domain);\n    }\n\n    static encode(domain: TypedDataDomain, types: Record<string, Array<TypedDataField>>, value: Record<string, any>): string {\n        return concat([\n            \"0x1901\",\n            TypedDataEncoder.hashDomain(domain),\n            TypedDataEncoder.from(types).hash(value)\n        ]);\n    }\n\n    static hash(domain: TypedDataDomain, types: Record<string, Array<TypedDataField>>, value: Record<string, any>): string {\n        return keccak256(TypedDataEncoder.encode(domain, types, value));\n    }\n\n    // Replaces all address types with ENS names with their looked up address\n    static async resolveNames(domain: TypedDataDomain, types: Record<string, Array<TypedDataField>>, value: Record<string, any>, resolveName: (name: string) => Promise<string>): Promise<{ domain: TypedDataDomain, value: any }> {\n        // Make a copy to isolate it from the object passed in\n        domain = Object.assign({ }, domain);\n\n        // Allow passing null to ignore value\n        for (const key in domain) {\n            if ((<Record<string, any>>domain)[key] == null) {\n                delete (<Record<string, any>>domain)[key];\n            }\n        }\n\n        // Look up all ENS names\n        const ensCache: Record<string, string> = { };\n\n        // Do we need to look up the domain's verifyingContract?\n        if (domain.verifyingContract && !isHexString(domain.verifyingContract, 20)) {\n            ensCache[domain.verifyingContract] = \"0x\";\n        }\n\n        // We are going to use the encoder to visit all the base values\n        const encoder = TypedDataEncoder.from(types);\n\n        // Get a list of all the addresses\n        encoder.visit(value, (type: string, value: any) => {\n            if (type === \"address\" && !isHexString(value, 20)) {\n                ensCache[value] = \"0x\";\n            }\n            return value;\n        });\n\n        // Lookup each name\n        for (const name in ensCache) {\n            ensCache[name] = await resolveName(name);\n        }\n\n        // Replace the domain verifyingContract if needed\n        if (domain.verifyingContract && ensCache[domain.verifyingContract]) {\n            domain.verifyingContract = ensCache[domain.verifyingContract];\n        }\n\n        // Replace all ENS names with their address\n        value = encoder.visit(value, (type: string, value: any) => {\n            if (type === \"address\" && ensCache[value]) { return ensCache[value]; }\n            return value;\n        });\n\n        return { domain, value };\n    }\n\n    static getPayload(domain: TypedDataDomain, types: Record<string, Array<TypedDataField>>, value: Record<string, any>): any {\n        // Validate the domain fields\n        TypedDataEncoder.hashDomain(domain);\n\n        // Derive the EIP712Domain Struct reference type\n        const domainValues: Record<string, any> = { };\n        const domainTypes: Array<{ name: string, type:string }> = [ ];\n\n        domainFieldNames.forEach((name) => {\n            const value = (<any>domain)[name];\n            if (value == null) { return; }\n            domainValues[name] = domainChecks[name](value);\n            domainTypes.push({ name, type: domainFieldTypes[name] });\n        });\n\n        const encoder = TypedDataEncoder.from(types);\n\n        const typesWithDomain = Object.assign({ }, types);\n        assertArgument(typesWithDomain.EIP712Domain == null, \"types must not contain EIP712Domain type\", \"types.EIP712Domain\", types);\n\n        typesWithDomain.EIP712Domain = domainTypes;\n\n        // Validate the data structures and types\n        encoder.encode(value);\n\n        return {\n            types: typesWithDomain,\n            domain: domainValues,\n            primaryType: encoder.primaryType,\n            message: encoder.visit(value, (type: string, value: any) => {\n\n                // bytes\n                if (type.match(/^bytes(\\d*)/)) {\n                    return hexlify(getBytes(value));\n                }\n\n                // uint or int\n                if (type.match(/^u?int/)) {\n                    return getBigInt(value).toString();\n                }\n\n                switch (type) {\n                    case \"address\":\n                        return value.toLowerCase();\n                    case \"bool\":\n                        return !!value;\n                    case \"string\":\n                        assertArgument(typeof(value) === \"string\", \"invalid string\", \"value\", value);\n                        return value;\n                }\n\n                assertArgument(false, \"unsupported type\", \"type\", type);\n            })\n        };\n    }\n}\n\n/**\n *  Compute the address used to sign the typed data for the %%signature%%.\n */\nexport function verifyTypedData(domain: TypedDataDomain, types: Record<string, Array<TypedDataField>>, value: Record<string, any>, signature: SignatureLike): string {\n    return recoverAddress(TypedDataEncoder.hash(domain, types, value), signature);\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}