{"ast":null,"code":"var _jsxFileName = \"/Users/zhu/Desktop/nft-collectible-frontend/src/App.js\",\n  _s = $RefreshSig$();\nimport { useEffect, useState } from 'react';\nimport './App.css';\nimport contract from './contracts/NFTCollectible.json';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst contractAddress = \"0x5F7959A124C44fa8E352ed614d245305781E6153\";\nconst abi = contract.abi;\nfunction App() {\n  _s();\n  const [currentAccount, setCurrentAccount] = useState(null);\n  const checkWalletIsConnected = async () => {\n    const {\n      ethereum\n    } = window;\n    if (!ethereum) {\n      console.log(\"make sure you have metamask installed!\");\n      return;\n    } else {\n      console.log(\"wallet exists! we are ready to go!\");\n    }\n    const accounts = await ethereum.request({\n      method: 'eth_accounts'\n    });\n    if (accounts.length !== 0) {\n      const account = accounts[0];\n      console.log(\"found an authorized account: \", account);\n      setCurrentAccount(account);\n    } else {\n      console.log(\"no authorized account found\");\n    }\n  };\n  const connectWalletHandler = async () => {\n    const {\n      ethereum\n    } = window;\n    if (!ethereum) {\n      alert(\"please install metamask!\");\n    }\n    try {\n      const accounts = await ethereum.request({\n        method: 'eth_requestAccounts'\n      });\n      console.log(\"found an account! address: \", accounts[0]);\n      setCurrentAccount(accounts[0]);\n    } catch (err) {\n      console.log(err);\n    }\n  };\n  const mintNftHandler = () => {};\n  const connectWalletButton = () => {\n    return /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: connectWalletHandler,\n      className: \"cta-button connect-wallet-button\",\n      children: \"Connect Wallet\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 7\n    }, this);\n  };\n  const safeMint = () => {\n    return /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: mintNftHandler,\n      className: \"cta-button mint-nft-button\",\n      children: \"Mint NFT\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 7\n    }, this);\n  };\n  useEffect(() => {\n    checkWalletIsConnected();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"main-app\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Scrappy Squirrels Tutorial\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: connectWalletButton()\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 72,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"vg9h9hqTAVJVjklrPXRRIAqzLN0=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["useEffect","useState","contract","jsxDEV","_jsxDEV","contractAddress","abi","App","_s","currentAccount","setCurrentAccount","checkWalletIsConnected","ethereum","window","console","log","accounts","request","method","length","account","connectWalletHandler","alert","err","mintNftHandler","connectWalletButton","onClick","className","children","fileName","_jsxFileName","lineNumber","columnNumber","safeMint","_c","$RefreshReg$"],"sources":["/Users/zhu/Desktop/nft-collectible-frontend/src/App.js"],"sourcesContent":["import { useEffect,useState } from 'react';\nimport './App.css';\nimport contract from './contracts/NFTCollectible.json';\n\nconst contractAddress = \"0x5F7959A124C44fa8E352ed614d245305781E6153\";\nconst abi = contract.abi;\n\nfunction App() {\n\n  const [currentAccount, setCurrentAccount] = useState(null);\n\n  const checkWalletIsConnected = async() => { \n    const { ethereum } = window;\n\n    if (!ethereum){\n      console.log(\"make sure you have metamask installed!\");\n      return;\n    }else{\n      console.log(\"wallet exists! we are ready to go!\");\n    }\n\n    const accounts = await ethereum.request({method:'eth_accounts'});\n\n    if (accounts.length !== 0){\n      const account = accounts[0];\n      console.log(\"found an authorized account: \",account);\n      setCurrentAccount(account);\n    }else{\n      console.log(\"no authorized account found\");\n    }\n  }\n\n  const connectWalletHandler = async() => {\n    const { ethereum } = window;\n    \n    if(!ethereum){\n      alert(\"please install metamask!\");\n    }\n\n    try{\n      const accounts = await ethereum.request({method: 'eth_requestAccounts'});\n      console.log(\"found an account! address: \",accounts[0]);\n      setCurrentAccount(accounts[0]);\n    }catch(err){\n      console.log(err)\n    }\n   }\n\n  const mintNftHandler = () => {}\n\n  const connectWalletButton = () => {\n    return (\n      <button onClick={connectWalletHandler} className='cta-button connect-wallet-button'>\n        Connect Wallet\n      </button>\n    )\n  }\n\n  const safeMint = () => {\n    return (\n      <button onClick={mintNftHandler} className='cta-button mint-nft-button'>\n        Mint NFT\n      </button>\n    )\n  }\n\n  useEffect(() => {\n    checkWalletIsConnected();\n  }, [])\n\n  return (\n    <div className='main-app'>\n      <h1>Scrappy Squirrels Tutorial</h1>\n      <div>\n        {connectWalletButton()}\n      </div>\n    </div>\n  )\n}\n\nexport default App;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}